-- Do this next:
    Actor-Critic network

    -Saving of boards.
    -Saving of replays.
    -Displaying of replays.


    -- Another idea, is that I take the basic state data, and then with that we find the neighbours and the neighbours neighbours maybe even Neighbours neighbours neighbour to give context around what a tile could be
        -- output of this nn would be the probability of the tile being a mine. Next 
        
    -- Another idea - Use a binary classifier to build a map of what is and isnt a mine that is trained on clicks
        and then use the output as a the input to a q network and make a decision on what to click.

-- Hard Maybes
    - Add a global definition of training tests so I don't need to manipulate many spots in code for training
        -Including stopping the game from ending when a mine is hit

    - Add screenshotting to be captured but not saved, as to be passed into the CNN model
    - Add a streamlined CNN model and use without having to reload it everytime.

    - Neural network to first decide which tiles MAY have a mine, via using convolutional NN on each tile... 
    - Train on a single tile and its neighbours?

TODO clean up files in folders.